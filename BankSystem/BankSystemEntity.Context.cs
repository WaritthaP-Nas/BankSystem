//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankSystem
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BankSystemEntities : DbContext
    {
        public BankSystemEntities()
            : base("name=BankSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Account> Accounts { get; set; }
        public DbSet<IBAN> IBANs { get; set; }
        public DbSet<LoginLog> LoginLogs { get; set; }
        public DbSet<Transaction_Deposit> Transaction_Deposit { get; set; }
        public DbSet<Transaction_Tranfer> Transaction_Tranfer { get; set; }
    
        [EdmFunction("BankSystemEntities", "FN_CheckLogin")]
        public virtual IQueryable<FN_CheckLogin_Result> FN_CheckLogin(string username, string pIN)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_CheckLogin_Result>("[BankSystemEntities].[FN_CheckLogin](@Username, @PIN)", usernameParameter, pINParameter);
        }
    
        public virtual int SP_InsertAccount(string code, string firstname, string surname, string phone, string sSN, Nullable<System.DateTime> date, Nullable<decimal> amount, string username, string pIN)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertAccount", codeParameter, firstnameParameter, surnameParameter, phoneParameter, sSNParameter, dateParameter, amountParameter, usernameParameter, pINParameter);
        }
    
        public virtual int SP_InsertDeposit(string code, Nullable<decimal> amount, Nullable<decimal> dep_fee, Nullable<decimal> dep_Amount, Nullable<System.DateTime> date, string by)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var dep_feeParameter = dep_fee.HasValue ?
                new ObjectParameter("dep_fee", dep_fee) :
                new ObjectParameter("dep_fee", typeof(decimal));
    
            var dep_AmountParameter = dep_Amount.HasValue ?
                new ObjectParameter("dep_Amount", dep_Amount) :
                new ObjectParameter("dep_Amount", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var byParameter = by != null ?
                new ObjectParameter("by", by) :
                new ObjectParameter("by", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertDeposit", codeParameter, amountParameter, dep_feeParameter, dep_AmountParameter, dateParameter, byParameter);
        }
    
        public virtual int SP_InsertTranfer(string fo_Code, string to_Code, Nullable<decimal> tranAmount, Nullable<decimal> fromAmount, Nullable<decimal> toAmount, Nullable<System.DateTime> date, string by)
        {
            var fo_CodeParameter = fo_Code != null ?
                new ObjectParameter("Fo_Code", fo_Code) :
                new ObjectParameter("Fo_Code", typeof(string));
    
            var to_CodeParameter = to_Code != null ?
                new ObjectParameter("To_Code", to_Code) :
                new ObjectParameter("To_Code", typeof(string));
    
            var tranAmountParameter = tranAmount.HasValue ?
                new ObjectParameter("TranAmount", tranAmount) :
                new ObjectParameter("TranAmount", typeof(decimal));
    
            var fromAmountParameter = fromAmount.HasValue ?
                new ObjectParameter("FromAmount", fromAmount) :
                new ObjectParameter("FromAmount", typeof(decimal));
    
            var toAmountParameter = toAmount.HasValue ?
                new ObjectParameter("ToAmount", toAmount) :
                new ObjectParameter("ToAmount", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var byParameter = by != null ?
                new ObjectParameter("By", by) :
                new ObjectParameter("By", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertTranfer", fo_CodeParameter, to_CodeParameter, tranAmountParameter, fromAmountParameter, toAmountParameter, dateParameter, byParameter);
        }
    
        public virtual int SP_Login(Nullable<int> accID, Nullable<System.DateTime> date)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Login", accIDParameter, dateParameter);
        }
    
        public virtual int SP_Logout(Nullable<int> accID, Nullable<System.DateTime> date)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Logout", accIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SP_SelectAccount_Result> SP_SelectAccount(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAccount_Result>("SP_SelectAccount", codeParameter);
        }
    
        public virtual ObjectResult<string> SP_SelectAccount_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_SelectAccount_All");
        }
    
        public virtual ObjectResult<string> SP_SelectAccount_ByAccID(Nullable<int> accID)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_SelectAccount_ByAccID", accIDParameter);
        }
    
        public virtual int SP_UpdateAmount(string code, Nullable<decimal> amount)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateAmount", codeParameter, amountParameter);
        }
    
        public virtual ObjectResult<string> SP_SelectAccount_ByAnoAccID(Nullable<int> accID)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_SelectAccount_ByAnoAccID", accIDParameter);
        }
    
        public virtual ObjectResult<string> SP_SelectAccount_ByCode(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_SelectAccount_ByCode", codeParameter);
        }
    
        public virtual int SP_UpdateAccount(string code, string firstname, string surname, string phone, string pIN)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateAccount", codeParameter, firstnameParameter, surnameParameter, phoneParameter, pINParameter);
        }
    }
}
